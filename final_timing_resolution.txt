#include <TApplication.h>
#include <TCanvas.h>
#include <TH1D.h>
#include <TFile.h>
#include <TROOT.h>
#include <TSystem.h>
#include <TTree.h>

#include <cmath>
#include <ctime>
#include <fstream>
#include <iostream>

#include "Garfield/AvalancheGrid.hh"
#include "Garfield/AvalancheMicroscopic.hh"
#include "Garfield/ComponentParallelPlate.hh"
#include "Garfield/FundamentalConstants.hh"
#include "Garfield/GeometrySimple.hh"
#include "Garfield/MediumMagboltz.hh"
#include "Garfield/Plotting.hh"
#include "Garfield/Sensor.hh"
#include "Garfield/SolidBox.hh"
#include "Garfield/TrackHeed.hh"
#include "Garfield/ViewSignal.hh"

#define LOG(x) std::cout << x << std::endl

using namespace Garfield;

int main(int argc, char *argv[]) {
  TApplication app("app", &argc, argv);
  plottingEngine.SetDefaultStyle();

  constexpr int N = 15;
  const double epGas = 1.;
  std::vector<double> eps = {3.1, 6., epGas, 8., epGas, 8., epGas, 8., epGas, 8., epGas, 8., epGas, 6., 3.1};
  std::vector<double> thickness = {0.035, 0.12, 0.025, 0.07, 0.025, 0.07, 0.025, 0.07, 0.025, 0.07, 0.025, 0.07, 0.025, 0.12, 0.035};
  double totalThickness = 0.81;
  const double voltage = -15e3;

  ComponentParallelPlate RPC;
  RPC.Setup(N, eps, thickness, voltage);
  const std::string label = "ReadoutPlane";
  RPC.AddPlane(label);

  MediumMagboltz gas;
  gas.LoadGasFile("c2h2f4_ic4h10_sf6.gas");
  gas.Initialise(true);

  SolidBox box(0., totalThickness / 2, 0., 5., totalThickness / 2, 5.);
  GeometrySimple geo;
  geo.AddSolid(&box, &gas);
  RPC.SetGeometry(&geo);
  RPC.SetMedium(&gas);

  Sensor sensor;
  sensor.AddComponent(&RPC);
  sensor.AddElectrode(&RPC, label);
  
  const unsigned int nTimeBins = 1000;
  const double tmin = 0.;
  const double tmax = 4.;
  const double tstep = (tmax - tmin) / nTimeBins;
  sensor.SetTimeWindow(tmin, tstep, nTimeBins);

  AvalancheMicroscopic aval;
  aval.SetSensor(&sensor);
  aval.EnableSignalCalculation();
  aval.UseWeightingPotential();

  AvalancheGrid avalgrid;
  avalgrid.SetSensor(&sensor);
  avalgrid.SetGrid(-0.05, 0.05, 5, 0.0, totalThickness, totalThickness * 1e4, -0.05, 0.05, 5);

  TrackHeed track;
  track.SetSensor(&sensor);
  track.SetParticle("pion");
  track.SetMomentum(7.e9);

  std::clock_t start = std::clock();
  track.NewTrack(0, totalThickness, 0, 0, 0, -1, 0);
  for (const auto &cluster : track.GetClusters()) {
    for (const auto &electron : cluster.electrons) {
      aval.AvalancheElectron(electron.x, electron.y, electron.z, electron.t, 0.1, 0., 0., 0.);
      avalgrid.ImportElectronsFromAvalancheMicroscopic(&aval);
    }
  }

  LOG("Switching to grid-based method.");
  avalgrid.AsignLayerIndex(&RPC);
  avalgrid.StartGridAvalanche();
  LOG("Electrons drifted. Time taken: " << (std::clock() - start) / (double)CLOCKS_PER_SEC << "s");

  TFile rootFile("output.root", "RECREATE");
  TH1D hSignal("hSignal", "Induced Signal;Time [ns];Signal [arb. units]", nTimeBins, tmin, tmax);
  TH1D hCharge("hCharge", "Induced Charge;Time [ns];Charge [fC]", nTimeBins, tmin, tmax);

  double meanTime = 0, variance = 0, totalCharge = 0;
  double weightedSum = 0, weight = 0;
  for (unsigned int i = 0; i < nTimeBins; ++i) {
    double signal = sensor.GetSignal(label, i);
    hSignal.SetBinContent(i + 1, signal);
    totalCharge += signal;
    weightedSum += hSignal.GetBinCenter(i + 1) * signal;
  }
  if (totalCharge != 0) meanTime = weightedSum / totalCharge;

  sensor.IntegrateSignal(label);
  for (unsigned int i = 0; i < nTimeBins; ++i) {
    hCharge.SetBinContent(i + 1, sensor.GetSignal(label, i));
  }

  double sumVariance = 0;
  for (unsigned int i = 0; i < nTimeBins; ++i) {
    double t = hSignal.GetBinCenter(i + 1);
    double signal = hSignal.GetBinContent(i + 1);
    sumVariance += signal * pow(t - meanTime, 2);
  }
  double timingResolution = (totalCharge != 0) ? sqrt(sumVariance / totalCharge) : 0;
  double pulseHeight = std::abs(hSignal.GetMinimum());
  double timeAtMin = hSignal.GetBinCenter(hSignal.GetMinimumBin());

  LOG("Timing Resolution: " << timingResolution << " ns");
  LOG("Pulse Height: " << pulseHeight << " (arb. units)");
  LOG("Time at Maximum Deviation: " << timeAtMin << " ns");

  TTree tree("pulseTree", "Pulse Data");
  tree.Branch("pulseHeight", &pulseHeight, "pulseHeight/D");
  tree.Branch("timeAtMin", &timeAtMin, "timeAtMin/D");
  tree.Branch("timingResolution", &timingResolution, "timingResolution/D");
  tree.Fill();

  rootFile.Write();
  rootFile.Close();
  LOG("Results saved to output.root");

  app.Run(kTRUE);
}

