#include <TApplication.h>
#include <TCanvas.h>
#include <TH1D.h>
#include <TFile.h>
#include <TROOT.h>
#include <TSystem.h>
#include <TTree.h>

#include <cmath>
#include <ctime>
#include <fstream>
#include <iostream>
#include <sstream>
#include <chrono>  // Include for timing

#include "Garfield/AvalancheMicroscopic.hh"
#include "Garfield/ComponentParallelPlate.hh"
#include "Garfield/FundamentalConstants.hh"
#include "Garfield/GeometrySimple.hh"
#include "Garfield/MediumMagboltz.hh"
#include "Garfield/Plotting.hh"
#include "Garfield/Sensor.hh"
#include "Garfield/SolidBox.hh"
#include "Garfield/TrackHeed.hh"

#define LOG(x) std::cout << x << std::endl

using namespace Garfield;

int main(int argc, char *argv[]) {
    TApplication app("app", &argc, argv);
    plottingEngine.SetDefaultStyle();

    const int N = 5;
    const double epMylar = 3.1;
    const double epGlaverbel = 8.0;
    const double epGas = 1.0;
    std::vector<double> eps = {epMylar, epGlaverbel, epGas, epGlaverbel, epMylar};

    const double dMylar = 0.016; // cm
    const double dGlaverbel = 0.07;
    const double dGas = 0.2; // Fixed value
    std::vector<double> thickness = {dMylar, dGlaverbel, dGas, dGlaverbel, dMylar};
    double totalThickness = dMylar * 2 + dGlaverbel * 2 + dGas;

    TFile *rootFile = new TFile("voltage_scan_dgas_0.20.root", "RECREATE");

    // Fixed voltage to 6000 V
    double voltage = -6000;

    std::ostringstream treeName, histName;
    treeName << "pulseTree_Voltage_" << voltage;
    histName << "hSignal_Voltage_" << voltage;

    TTree *tree = new TTree(treeName.str().c_str(), "Pulse Data");
    double pulseHeight, timingResolution, appliedVoltage = voltage;
    tree->Branch("pulseHeight", &pulseHeight, "pulseHeight/D");
    tree->Branch("timingResolution", &timingResolution, "timingResolution/D");
    tree->Branch("appliedVoltage", &appliedVoltage, "appliedVoltage/D");

    ComponentParallelPlate RPC;
    RPC.Setup(N, eps, thickness, voltage);
    const std::string label = "ReadoutPlane";
    RPC.AddPlane(label);

    MediumMagboltz gas;
    gas.LoadGasFile("c2h2f4_ic4h10_sf6.gas");
    gas.Initialise(true);

    SolidBox box(0., totalThickness / 2, 0., 5., totalThickness / 2, 5.);
    GeometrySimple geo;
    geo.AddSolid(&box, &gas);
    RPC.SetGeometry(&geo);
    RPC.SetMedium(&gas);

    Sensor sensor;
    sensor.AddComponent(&RPC);
    sensor.AddElectrode(&RPC, label);

    const unsigned int nTimeBins = 1000;
    const double tmin = 0.;
    const double tmax = 20.;
    const double tstep = (tmax - tmin) / nTimeBins;
    sensor.SetTimeWindow(tmin, tstep, nTimeBins);

    TH1D *hSignal = new TH1D(histName.str().c_str(),
                             "Induced Signal;Time [ns];Signal [arb. units]",
                             nTimeBins, tmin, tmax);

    const int nRuns = 5000;
    for (int run = 0; run < nRuns; ++run) {
        LOG("Voltage " << voltage << " V | Run " << run + 1 << " / " << nRuns);
        sensor.ClearSignal();

        AvalancheMicroscopic aval;
        aval.SetSensor(&sensor);
        aval.EnableSignalCalculation();
        aval.UseWeightingPotential();
        aval.SetTimeWindow(0., 0.1); // 0.1 ns max drift time

        TrackHeed track;
        track.SetSensor(&sensor);
        track.SetParticle("electron"); // Use electron for Sr-90 beta particle
        track.SetEnergy(546000); // 0.546 MeV, energy of Sr-90 beta particle

        track.NewTrack(0, totalThickness, 0, 0, 0, -1, 0);

        // Start timing the avalanche here
        auto start = std::chrono::high_resolution_clock::now();

        for (const auto &cluster : track.GetClusters()) {
            for (const auto &electron : cluster.electrons) {
                aval.AvalancheElectron(electron.x, electron.y, electron.z, electron.t, 0.1, 0., 0., 0.);
            }
        }

        // End timing the avalanche here
        auto end = std::chrono::high_resolution_clock::now();
        std::chrono::duration<double> elapsed = end - start;

        double meanTime = 0, totalCharge = 0, weightedSum = 0;
        pulseHeight = 0;

        for (unsigned int i = 0; i < nTimeBins; ++i) {
            double signal = sensor.GetSignal(label, i);
            hSignal->SetBinContent(i + 1, signal);
            totalCharge += signal;
            weightedSum += hSignal->GetBinCenter(i + 1) * signal;
            if (std::abs(signal) > pulseHeight) {
                pulseHeight = std::abs(signal);
            }
        }

        if (totalCharge != 0) meanTime = weightedSum / totalCharge;

        double sumVariance = 0;
        for (unsigned int i = 0; i < nTimeBins; ++i) {
            double t = hSignal->GetBinCenter(i + 1);
            double signal = hSignal->GetBinContent(i + 1);
            sumVariance += signal * pow(t - meanTime, 2);
        }
        timingResolution = (totalCharge != 0) ? sqrt(sumVariance / totalCharge) * 10 : 0;

        tree->Fill();

        // Print the avalanche time and pulse height for each run
        LOG("Run " << run + 1 << ": Pulse height = " << pulseHeight
                   << ", Avalanche time = " << elapsed.count() << " s");
    }

    hSignal->Write();
    tree->Write();
    delete hSignal;

    rootFile->Close();
    LOG("All results saved to voltage_scan_dgas_0.20.root");
    return 0;
}

